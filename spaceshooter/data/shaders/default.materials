SHADER color
    VERTEX
        INPUTS apos:4
        UNIFORMS mvp
        gl_Position = mvp * apos;
    PIXEL
        UNIFORMS col
        frag_color = col;

SHADER color_attr
    VERTEX
        INPUTS apos:4 acolor:4
        UNIFORMS mvp
        gl_Position = mvp * apos;
		icol = acolor;
    PIXEL
        INPUTS icol:4
        frag_color = icol;

SHADER color_attr_particle
    VERTEX
        INPUTS apos:4 acolor:4
        UNIFORMS mvp pointscale
        gl_Position = mvp * apos;
		icol = acolor;
		gl_PointSize = pointscale;
    PIXEL
        INPUTS icol:4
        vec2 c = gl_PointCoord * 2.0 - 1.0;
        frag_color = vec4(icol.xyz, smoothstep(0.0, 1.0, 1.0 - length(c)));

SHADER textured
    VERTEX
        INPUTS apos:4 atc:2
        UNIFORMS mvp
        gl_Position = mvp * apos;
        itc = atc;
    PIXEL
        INPUTS itc:2
        UNIFORMS tex0 col
        frag_color = texture(tex0, itc) * col;

SHADER textured_color
    VERTEX
        INPUTS apos:4 atc:2 acolor:4
        UNIFORMS mvp
        gl_Position = mvp * apos;
        itc = atc;
        icolor = acolor;
    PIXEL
        INPUTS itc:2 icolor:4
        UNIFORMS tex0 col
        frag_color = texture(tex0, itc) * col * icolor;

PIXELFUNCTIONS
    vec4 Phong(vec3 inormal, vec3 ipos)
    {
        vec3 nnormal = normalize(inormal);
        vec3 cameravec = normalize(camera - ipos);
        vec3 light1vec = normalize(light1 - ipos);
        vec3 halfangle1 = normalize(cameravec + light1vec);
        float NdotL = dot(nnormal, light1vec);
        float NdotC = dot(nnormal, halfangle1);
        float spec = pow(clamp(NdotC, 0.0, 1.0), lightparams1.x) * lightparams1.y;
        return vec4(vec3(max(0.1, NdotL + spec)), 1);
    }

SHADER phong
    VERTEX
        INPUTS apos:4 anormal:3 acolor:4
        UNIFORMS mvp
        gl_Position = mvp * apos;
        inormal = anormal;
        icol = acolor;
        ipos = apos.xyz;
    PIXEL
        INPUTS inormal:3 ipos:3 icol:4
        UNIFORMS col camera light1 lightparams1
        frag_color = col * icol * Phong(inormal, ipos);

SHADER phong_textured
    VERTEX
        INPUTS apos:4 anormal:3 atc:2
        UNIFORMS mvp
        gl_Position = mvp * apos;
        inormal = anormal;
        ipos = apos.xyz;
        itc = atc;
    PIXEL
        INPUTS inormal:3 ipos:3 itc:2
        UNIFORMS tex0 col camera light1 lightparams1
        frag_color = col * Phong(inormal, ipos) * texture(tex0, itc);

SHADER flat
    VERTEX
        INPUTS apos:4 acolor:4
        UNIFORMS mvp
        gl_Position = mvp * apos;
        icol = acolor;
        ipos = apos.xyz;
    PIXEL
        INPUTS ipos:3 icol:4
        UNIFORMS col camera light1 lightparams1
        // WARNING: only works on OpenGL ES 3 or better.
        // would be even flatter if we knew the centroid.
        // Also: only works with light at camera.
        vec3 wnormal = normalize(cross(dFdx(ipos), dFdy(ipos)));
        frag_color = col * icol * Phong(wnormal, ipos);

SHADER phong_particle
    VERTEX
        INPUTS apos:4 anormal:3 acolor:4
        UNIFORMS mvp pointscale camera
        gl_Position = mvp * apos;
        inormal = anormal;
        icol = acolor;
        ipos = apos.xyz;
        // Do our own backface culling. Also scale point relative to on-screen size.
        gl_PointSize = dot(anormal, apos.xyz - camera) < 0.0 ? pointscale / gl_Position.w : 0.0;
    PIXEL
        INPUTS inormal:3 ipos:3 icol:4
        UNIFORMS col camera light1 lightparams1
        vec2 c = gl_PointCoord * 2.0 - 1.0;
        if(dot(c, c * c * c) > 1.0) discard;  // Squircles!
        frag_color = col * icol * Phong(inormal, ipos);


VERTEXFUNCTIONS
    mat4 getmat(int i)  // have to do this to get around lack of mat3x4 support on ES2
    {
        return mat4(bones[i * 3 + 0],
                    bones[i * 3 + 1],
                    bones[i * 3 + 2],
                    vec4(0, 0, 0, 1));
    }

SHADER phong_anim
    VERTEX
        INPUTS apos:4 anormal:3 atc:2 acolor:4 aweights:4 aindices:4
        UNIFORMS mvp bones
        mat4 m = getmat(int(aindices.x)) * aweights.x;
        m +=     getmat(int(aindices.y)) * aweights.y;
        m +=     getmat(int(aindices.z)) * aweights.z;
        m +=     getmat(int(aindices.w)) * aweights.w;
        gl_Position = mvp * (apos * m);
        inormal = (vec4(anormal, 0) * m).xyz;
        itc = atc;
        icol = acolor;
        ipos = apos.xyz;
    PIXEL
        INPUTS inormal:3 ipos:3 itc:2 icol:4
        UNIFORMS col camera light1 lightparams1 tex0
        frag_color = col * icol * Phong(inormal, ipos) * texture(tex0, itc);

